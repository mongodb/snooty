import { css } from '@emotion/react';
import { palette } from '@leafygreen-ui/palette';
import { theme } from '../../theme/docsTheme';

const badgeBorderRadius = '50px';
const badgeBorderType = '1px solid';
const codeFontFamily = 'Source Code Pro';
const textFontFamily = '"Euclid Circular A", Akzidenz, "Helvetica Neue", Helvetica, Arial, sans-serif';

// Redoc's theme option: https://github.com/Redocly/redoc/#redoc-theme-object
export const themeOption = {
  breakpoints: {
    small: '768px',
    medium: '1024px',
    large: '1200px',
  },
  codeBlock: {
    backgroundColor: palette.gray.dark3,
  },
  colors: {
    error: {
      main: palette.red.base,
    },
    // Only applies to background color; color and border color touched by css
    http: {
      get: palette.blue.dark2,
      post: palette.green.dark3,
      put: palette.yellow.dark3,
      patch: palette.yellow.dark3,
      delete: palette.red.dark3,
    },
    primary: {
      main: palette.black,
    },
    // Affects the colors of the responses for each endpoint in the main column,
    // and the response codes in the right sidebar.
    responses: {
      success: {
        color: palette.green.dark2,
        backgroundColor: palette.green.light3,
        tabTextColor: palette.green.base,
      },
      error: {
        color: palette.red.base,
        backgroundColor: palette.red.light3,
        tabTextColor: palette.red.base,
      },
    },
    // Main column content text color
    text: {
      primary: palette.gray.dark3,
    },
    // Example: "deprecated" badges
    warning: {
      main: palette.gray.light1,
      contrastText: palette.gray.dark1,
    },
  },
  // Right sidebar
  rightPanel: {
    backgroundColor: palette.black,
  },
  // Schema for each endpoint
  schema: {
    requireLabelColor: palette.red.base,
  },
  // Left sidebar
  sidebar: {
    activeTextColor: palette.green.dark3,
    backgroundColor: palette.gray.light3,
    textColor: palette.black,
    width: '268px',
  },
  spacing: {
    unit: 4,
    sectionVertical: 16,
  },
  typography: {
    fontSize: theme.fontSize.default,
    fontFamily: textFontFamily,
    headings: {
      fontFamily: textFontFamily,
    },
    code: {
      backgroundColor: palette.gray.light3,
      color: palette.gray.dark3,
      fontFamily: codeFontFamily,
      fontSize: theme.fontSize.small,
    },
    links: {
      color: palette.blue.base,
      hover: palette.blue.base,
      visited: palette.blue.base,
    },
  },
};

/*
 *
 * NOTE:
 *
 * The CSS styling below consists of a combination of Redoc's named classes,
 * and classes generated by Redoc's instance of Styled Components at the current
 * version of the Redoc component. There's a risk that upgrading Redoc versions
 * will result in different classnames, especially for those related to Styled
 * Components (prefixed with "sc-").
 *
 */

export const codeBlockCss = css`
  // General code tags, especially for code blocks
  code {
    font-family: ${codeFontFamily};
  }

  // Code block divs
  div.hoverable {
    color: ${palette.white};
  }

  // Highlight syntax in code blocks
  span.ellipsis:after {
    color: ${palette.white};
  }
  span.token.boolean {
    color: #e06c75 !important;
  }
  span.token.keyword {
    color: #c678dd !important;
  }
  span.token.number {
    color: #61aeee !important;
  }
  span.token.punctuation {
    color: ${palette.white};
  }
  span.token.string:not(.property) {
    color: #98c379 !important;
  }
`;

export const inlineCodeCss = css`
  // InlineCode inside of Parameters and Schemas
  span.sc-eLgOdN,
  // InlineCode found in data types of Parameters and Schemas; example: "string 24 characters"
  span.sc-kIeTtH {
    background-color: ${palette.blue.light3};
    border-color: ${palette.blue.light2};
  }
`;

export const leftSidebarCss = css`
  label[role='menuitem'] {
    font-size: 13px;

    :hover {
      background-color: ${palette.gray.light2};
    }
    &.active {
      background-color: ${palette.green.light3};
    }
  }
`;

export const rightSidebarCss = css`
  // Status code / Response tabs
  ul.react-tabs__tab-list {
    li[role='tab'] {
      background-color: ${palette.gray.dark3};
      border: unset;
      color: ${palette.gray.base} !important;
    }

    li.react-tabs__tab--selected {
      // General selected tab should have the following styles
      background-color: ${palette.white};
      color: ${palette.black} !important;

      &.tab-error {
        background-color: ${palette.gray.dark2} !important;
        color: ${palette.red.light1} !important;
      }

      &.tab-success {
        background-color: ${palette.gray.dark2} !important;
        color: ${palette.green.light1} !important;
      }
    }
  }
`;

export const schemaDataTypesCss = css`
  // Data types under query parameters; ex - "string" / "boolean"
  span.sc-fWSCIC,
  // Regex next to data types under query parameters; ex - "^([\w]{24})$"
  span.sc-hlTvYk,
  // "Array of" keyword next to data types under query parameters
  span.sc-GqfZa,
  // Parenthesized data types under query paramters; ex - "(ObjectId)"
  span.sc-dwfUOf {
    color: ${palette.gray.dark3};
  }
`;

export const spanHttpCss = css`
  // HTTP badges
  span.get {
    border: ${badgeBorderType} ${palette.blue.dark1};
    color: ${palette.blue.light2};
  }
  span.post {
    border: ${badgeBorderType} ${palette.green.dark2};
    color: ${palette.green.base};
  }
  span.patch,
  span.put {
    border: ${badgeBorderType} ${palette.yellow.dark2};
    color: ${palette.yellow.light2};
  }
  span.delete {
    border: ${badgeBorderType} ${palette.red.dark2};
    color: ${palette.red.light2};
  }

  // Left sidebar badges
  span.operation-type {
    border-radius: ${badgeBorderRadius};
    font-family: ${textFontFamily};
  }

  // Right sidebar badges
  span.http-verb {
    border-radius: ${badgeBorderRadius};
    font-weight: bold;
  }
`;

export const deprecatedBadgeCss = css`
  // "deprecated" badge; related to the warning color theme
  span[type='warning'] {
    border-radius: 4px;
  }
`;
